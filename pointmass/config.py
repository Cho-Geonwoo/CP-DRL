import torch
from dataclasses import dataclass

DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")


@dataclass
class CPDRL:
    # Hyperparameters
    ALPHA = 1.0
    TRANSITION_HIDDEN_DIM = 32
    REWARD_HIDDEN_DIM = 256
    STATE_VAE_LATENT_DIM = 32
    ACTION_VAE_LATENT_DIM = 16
    ENSEMBLE_SIZE = 10
    LEARNING_RATE = 1e-3

    # Scale for disagreement
    TRANSITION_DISAGREEMENT_SCALE = 0
    STATE_DISAGREEMENT_SCALE = 0
    ACTION_DISAGREEMENT_SCALE = 0
    REWARD_DISAGREEMENT_SCALE = 0
    ALIGNED = True

    @staticmethod
    def to_dict():
        return {
            "ALPHA": CPDRL.ALPHA,
            "TRANSITION_HIDDEN_DIM": CPDRL.TRANSITION_HIDDEN_DIM,
            "REWARD_HIDDEN_DIM": CPDRL.REWARD_HIDDEN_DIM,
            "STATE_VAE_LATENT_DIM": CPDRL.STATE_VAE_LATENT_DIM,
            "ACTION_VAE_LATENT_DIM": CPDRL.ACTION_VAE_LATENT_DIM,
            "ENSEMBLE_SIZE": CPDRL.ENSEMBLE_SIZE,
            "LEARNING_RATE": CPDRL.LEARNING_RATE,
            "TRANSITION_DISAGREEMENT_SCALE": CPDRL.TRANSITION_DISAGREEMENT_SCALE,
            "STATE_DISAGREEMENT_SCALE": CPDRL.STATE_DISAGREEMENT_SCALE,
            "ACTION_DISAGREEMENT_SCALE": CPDRL.ACTION_DISAGREEMENT_SCALE,
            "REWARD_DISAGREEMENT_SCALE": CPDRL.REWARD_DISAGREEMENT_SCALE,
            "ALIGNED": CPDRL.ALIGNED,
        }
